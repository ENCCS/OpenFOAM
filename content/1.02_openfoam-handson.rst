.. _openfoam-handson:


What is OenFOAM ?
-----------------

- OpenFOAM is an open source Computation Fluid Dynamics (CFD) solve released and developed primarily by OpenCFD Ltd since 2004. 

- It has a large user base across most areas of engineering and science, from both commercial and academic organizations. 

- OpenFOAM has an extensive range of features to solve anything from complex fluid flows involving chemical reactions, turbulence and heat transfer, to acoustics, solid mechanics and electromagnetics. 

- There are two main branches of OpenFOAM, 

  - one is from OpenFOAM Foundation (`www.openfoam.org <http://www.openfoam.org>`_),
  - and the other is OpenCFD Ltd (`www.openfoam.com <http://www.openfoam.com>`_).
  - In this guide, we only consider the later

-  Extensive guides, tutorials, code samples and documentation on the OpenFOAM
   can be found at `www.openfoam.com <http://www.openfoam.com>`_.


General Information
^^^^^^^^^^^^^^^^^^^

- There are usually three subfolders (**0**, **constant** and **system**) for all OpenFOAM cases

.. code:: bash

 $ ls
 0 constant system

where folder **0** includes the initial and boundary condition variables and the parameters
for turbulence models. **constant** includes geometry information such as meshes (points,
faces, boundary etc.), connections, STL files etc. **system** includes the various dictionaries
(Dict) to set different parameters. For example, we can modify the following files

- **system/blockMeshDict**: to set the block size.
- **system/snappyHexMeshDict**: to set parameters for snappyHexMesh
- **system/decomposeParDict** : to split mesh into submeshes for every MPI-rank

.. code:: bash

 numberOfSubdomains 16; // Set the number of used processes (16)?
 method scotch; // Set the partition method (scotch) ?

- **system/controlDict**: control variables

.. code:: bash

 application simpleFoam; // Set the OpenFOAM solver (simpleFoam)
 ...
 endTime 500; // Set the time steps (500 steps)
 ...
 writeInterval 100; // Write results in files (per 100 steps)
 ...

The general workflow for a OpenFOAM case is shown as follows

.. code:: bash

 Start
   |
   v
 blockMesh // Create a block mesh (set by system/blockMeshDict)
   |
   v
 decomposePar // Divide into submeshes (set by system/decomposeParDict)
   |
   v
 snappyHexMesh // create complex mesh (set by system/snappyHexMeshDict)
   |
   V
 simpleFOAM // run application(OpenFOAM solver) (set by system/controlDict)


Case studies
------------

Lid-driven cavity flow
^^^^^^^^^^^^^^^^^^^^^^

This case uses OpenFOAM to calculate the incompressible flow in a two-dimensional square domain.

- As OpenFOAM cases are not backward compatible, always copy cases from *$FOAM_TUTORIALS* of current version

.. code:: bash

 $ module add openfoam/1912  # Using OpenFOAM v1912         
 $ echo $FOAM_BASHRC
 /pdc/vol/openfoam/v1912/OpenFOAM-v1912/etc/bashrc
 $ source $FOAM_BASHRC
 $ cp -r $FOAM_TUTORIALS/incompressible/icoFoam/cavity/cavity . 

- The structure of the case is shown in the following

.. code:: bash

 $ cd cavity
 $ ls
 0 constant system

 $ tree 

 ├── 0 (time directory starting with T=0, initial conditions)
 │   ├── p (pressure)
 │   └── U (flow velocity)
 ├── Allrun (precanned run file)
 ├── constant (hard static stuff i.e. physical properties)
 │   ├── transportProperties (Transport Model e.g. Newtonian)
 └── system
    ├── blockMeshDict 
    ├── controlDict (the main dictionary for controlling the simulation)
    ├── fvSchemes
    ├── fvSolution
    ├── PDRblockMeshDict

- The default setting is to run the application *simpleFoam* in serial with two-dimensional block size of (20×20×1). The case will run to 0.5 with 0.005 per step. The middle results are stored in every 20 time steps. The workflow is following


Run the case
^^^^^^^^^^^^

.. code:: bash

 $ source $FOAM_BASHRC
 $ blockMesh # create the equivalent mesh of (20x20x1)
 $ icoFoam

Modification
^^^^^^^^^^^^

- For the scalability tests, the default mesh of 35 k cells is small, we need to increase the block mesh size. We can change the settings in file *system/blockMeshDict*, for example, from

i.e. the mesh size in x, y, and z directories increases 10 times.

- Also we can change the MPI rank and the decomposition method in file *system/decomposeParDict*, for example, change the default

The script *Allclean* can be used to delete the log files and remove the results from
motorBike run and then rerun again.

Validating the model
^^^^^^^^^^^^^^^^^^^^

